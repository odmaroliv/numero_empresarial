@page "/plans"
@using Microsoft.AspNetCore.Authorization
@using NumeroEmpresarial.Core.Interfaces
@using NumeroEmpresarial.Domain.Entities
@inject IUserService UserService
@inject IStripeService StripeService
@inject ILocalizationService LocalizationService
@inject IAuthenticationService AuthenticationService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@attribute [Authorize]

<div class="container py-5">
    <div class="text-center mb-5">
        <h1 class="display-4 fw-bold text-primary">@LocalizedText("Plans.Title")</h1>
        <p class="lead">@LocalizedText("Plans.Subtitle")</p>
    </div>

    @if (_isLoading)
    {
        <div class="d-flex justify-content-center my-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">@LocalizedText("Common.Loading")</span>
            </div>
        </div>
    }
    else
    {
        @if (_currentSubscription != null)
        {
            <div class="alert alert-info d-flex align-items-center mb-5">
                <div class="me-3">
                    <i class="fas fa-info-circle fa-2x"></i>
                </div>
                <div>
                    <h5 class="mb-1">@LocalizedText("Plans.CurrentSubscription")</h5>
                    <p class="mb-0">
                        @LocalizedText("Plans.YouAreSubscribedTo") <strong>@_currentSubscription.Plan.Name</strong>.
                        @LocalizedText("Plans.SubscriptionEndsOn") <strong>@_currentSubscription.EndDate.ToLocalTime().ToString("dd/MM/yyyy")</strong>.
                    </p>
                </div>
            </div>
        }

        <div class="row">
            @foreach (var plan in _plans)
            {
                <div class="col-md-4 mb-4">
                    <div class="card shadow h-100 @(IsPlanSelected(plan) ? "border-primary" : "")">
                        <div class="card-header bg-gradient-@GetPlanColor(plan) text-white text-center py-3">
                            <h4 class="mb-0">@plan.Name</h4>
                        </div>
                        <div class="card-body d-flex flex-column">
                            <div class="text-center mb-4">
                                <h2 class="display-5 text-primary">$@plan.MonthlyPrice.ToString("F2")</h2>
                                <p class="text-muted">@LocalizedText("Plans.PerMonth")</p>
                            </div>
                            <ul class="list-group list-group-flush mb-4">
                                <li class="list-group-item d-flex align-items-center">
                                    <i class="fas fa-check text-success me-2"></i>
                                    <span>@plan.MaxPhoneNumbers @LocalizedText("Plans.PhoneNumbers")</span>
                                </li>
                                <li class="list-group-item d-flex align-items-center">
                                    <i class="fas fa-check text-success me-2"></i>
                                    <span>@LocalizedText("Plans.MessageCost"): $@plan.MessageCost.ToString("F2")</span>
                                </li>
                                <li class="list-group-item d-flex align-items-center">
                                    <i class="fas fa-check text-success me-2"></i>
                                    <span>@LocalizedText("Plans.WindowCost"): $@plan.WindowCost.ToString("F2")</span>
                                </li>
                                <li class="list-group-item d-flex align-items-center">
                                    <i class="fas fa-check text-success me-2"></i>
                                    <span>@plan.WindowDuration @LocalizedText("Plans.MinutesPerWindow")</span>
                                </li>
                                <li class="list-group-item d-flex align-items-center">
                                    <i class="fas fa-check text-success me-2"></i>
                                    <span>@LocalizedText("Plans.FullSupport")</span>
                                </li>
                            </ul>
                            <div class="mt-auto">
                                @if (IsPlanSelected(plan))
                                {
                                    <button class="btn btn-outline-primary w-100" disabled>
                                        <i class="fas fa-check-circle me-2"></i>@LocalizedText("Plans.CurrentPlan")
                                    </button>
                                }
                                else if (_isSubscribing && _selectedPlanId == plan.Id)
                                {
                                    <button class="btn btn-primary w-100" disabled>
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span class="ms-2">@LocalizedText("Common.Processing")</span>
                                    </button>
                                }
                                else
                                {
                                    <button class="btn btn-primary w-100" @onclick="() => SubscribeToPlan(plan.Id)">
                                        <i class="fas fa-credit-card me-2"></i>@LocalizedText("Plans.Subscribe")
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <div class="row mt-4">
            <div class="col-md-8 mx-auto">
                <div class="card shadow">
                    <div class="card-header bg-white">
                        <h5 class="mb-0 text-primary">@LocalizedText("Plans.FAQ")</h5>
                    </div>
                    <div class="card-body">
                        <div class="accordion" id="faqAccordion">
                            <div class="accordion-item">
                                <h2 class="accordion-header" id="headingOne">
                                    <button class="accordion-button" type="button" data-bs-toggle="collapse"
                                            data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                                        @LocalizedText("Plans.FAQ1Title")
                                    </button>
                                </h2>
                                <div id="collapseOne" class="accordion-collapse collapse show"
                                     aria-labelledby="headingOne" data-bs-parent="#faqAccordion">
                                    <div class="accordion-body">
                                        @LocalizedText("Plans.FAQ1Text")
                                    </div>
                                </div>
                            </div>
                            <div class="accordion-item">
                                <h2 class="accordion-header" id="headingTwo">
                                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                                            data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                                        @LocalizedText("Plans.FAQ2Title")
                                    </button>
                                </h2>
                                <div id="collapseTwo" class="accordion-collapse collapse"
                                     aria-labelledby="headingTwo" data-bs-parent="#faqAccordion">
                                    <div class="accordion-body">
                                        @LocalizedText("Plans.FAQ2Text")
                                    </div>
                                </div>
                            </div>
                            <div class="accordion-item">
                                <h2 class="accordion-header" id="headingThree">
                                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                                            data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                                        @LocalizedText("Plans.FAQ3Title")
                                    </button>
                                </h2>
                                <div id="collapseThree" class="accordion-collapse collapse"
                                     aria-labelledby="headingThree" data-bs-parent="#faqAccordion">
                                    <div class="accordion-body">
                                        @LocalizedText("Plans.FAQ3Text")
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@if (_showCancelModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@LocalizedText("Plans.CancelConfirm")</h5>
                    <button type="button" class="btn-close" @onclick="CloseCancelModal"></button>
                </div>
                <div class="modal-body">
                    <p>@LocalizedText("Plans.CancelWarning")</p>
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        @LocalizedText("Plans.CancelWarningDetails")
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseCancelModal">@LocalizedText("Common.Cancel")</button>
                    <button type="button" class="btn btn-danger" @onclick="CancelSubscription" disabled="@_isCancelling">
                        @if (_isCancelling)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span class="ms-2">@LocalizedText("Common.Processing")</span>
                        }
                        else
                        {
                            <i class="fas fa-times-circle me-2"></i>
                            <span>@LocalizedText("Plans.CancelSubscription")</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private string _currentLanguage = "es";
    private bool _isLoading = true;
    private Guid _currentUserId;
    private List<Plan> _plans = new();
    private Subscription _currentSubscription;

    // Suscripción
    private bool _isSubscribing = false;
    private Guid _selectedPlanId;

    // Cancelación
    private bool _showCancelModal = false;
    private bool _isCancelling = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Obtener idioma actual
            _currentLanguage = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "preferredLanguage") ?? "es";

            // Obtener el ID del usuario actual
            _currentUserId = await AuthenticationService.GetCurrentUserIdAsync();

            await LoadDataAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
            NavigationManager.NavigateTo("/", true);
        }
    }

    private async Task LoadDataAsync()
    {
        try
        {
            _isLoading = true;

            // Cargar planes
            _plans = await UserService.GetAllPlansAsync();

            // Cargar suscripción actual
            _currentSubscription = await UserService.GetActiveSubscriptionAsync(_currentUserId);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private bool IsPlanSelected(Plan plan)
    {
        return _currentSubscription != null && _currentSubscription.PlanId == plan.Id;
    }

    private string GetPlanColor(Plan plan)
    {
        // Asignar colores según el nivel del plan
        if (plan.MonthlyPrice < 20)
        {
            return "primary";
        }
        else if (plan.MonthlyPrice < 50)
        {
            return "success";
        }
        else
        {
            return "info";
        }
    }

    private async Task SubscribeToPlan(Guid planId)
    {
        try
        {
            _isSubscribing = true;
            _selectedPlanId = planId;

            // Crear sesión de checkout para suscripción
            string sessionId = await StripeService.CreateSubscriptionCheckoutAsync(_currentUserId, planId);

            // Redirigir a la página de checkout
            NavigationManager.NavigateTo($"/payment/checkout?sessionId={sessionId}");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
            _isSubscribing = false;
            StateHasChanged();
        }
    }

    private void ShowCancelModal()
    {
        _showCancelModal = true;
    }

    private void CloseCancelModal()
    {
        _showCancelModal = false;
    }

    private async Task CancelSubscription()
    {
        try
        {
            _isCancelling = true;

            if (_currentSubscription == null || string.IsNullOrEmpty(_currentSubscription.StripeSubscriptionId))
            {
                throw new Exception(await LocalizedText("Plans.NoActiveSubscription"));
            }

            // Cancelar suscripción
            await StripeService.CancelSubscriptionAsync(_currentSubscription.StripeSubscriptionId);

            // Recargar datos
            await LoadDataAsync();

            // Cerrar modal
            _showCancelModal = false;

            // Mostrar mensaje de éxito
            await JSRuntime.InvokeVoidAsync("alert", await LocalizedText("Plans.CancelSuccess"));
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
        finally
        {
            _isCancelling = false;
            StateHasChanged();
        }
    }

    private async Task<string> LocalizedText(string key)
    {
        try
        {
            return await LocalizationService.GetLocalizedTextAsync(key, _currentLanguage);
        }
        catch
        {
            return key; // Fallback si hay error
        }
    }
}