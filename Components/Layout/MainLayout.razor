@using NumeroEmpresarial.Core.Interfaces
@inherits LayoutComponentBase
@inject ILocalizationService LocalizationService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <div class="d-flex align-items-center">
                <div class="dropdown me-3">
                    <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="languageDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                        @if (_currentLanguage == "es")
                        {
                            <span>🇪🇸 Español</span>
                        }
                        else
                        {
                            <span>🇺🇸 English</span>
                        }
                    </button>
                    <ul class="dropdown-menu" aria-labelledby="languageDropdown">
                        <li><a class="dropdown-item @(_currentLanguage == "es" ? "active" : "")" href="#" @onclick="@(() => ChangeLanguage("es"))" @onclick:preventDefault>🇪🇸 Español</a></li>
                        <li><a class="dropdown-item @(_currentLanguage == "en" ? "active" : "")" href="#" @onclick="@(() => ChangeLanguage("en"))" @onclick:preventDefault>🇺🇸 English</a></li>
                    </ul>
                </div>

                <a href="/Account/Profile" class="btn btn-outline-primary me-2">
                    <i class="fas fa-user-circle"></i> @_userName
                </a>
                <a href="/Account/Logout" class="btn btn-outline-danger">
                    <i class="fas fa-sign-out-alt"></i> @LocalizedText("Actions.Logout")
                </a>
            </div>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private string _currentLanguage = "es"; // Valor predeterminado inicial
    private string _userName = "Usuario";
    private IJSObjectReference _module;
    private bool _isDisposed;

    // IMPORTANTE: No usamos OnInitializedAsync aquí, solo inicializamos con valores por defecto
    // y luego cargamos los valores reales desde JS en OnAfterRenderAsync

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Cargar módulo JS
                _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/mainLayout.js");

                // Obtener idioma del navegador o de localStorage (sólo después del primer renderizado)
                var storedLanguage = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "preferredLanguage");
                if (!string.IsNullOrEmpty(storedLanguage))
                {
                    _currentLanguage = storedLanguage;
                    StateHasChanged(); // Forzar actualización de la UI con el idioma correcto
                }

                // Aquí podríamos obtener también el nombre de usuario actual si es necesario
                // _userName = ...
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error in OnAfterRenderAsync: {ex.Message}");
                // No mostrar errores al usuario, simplemente usar los valores predeterminados
            }
        }
    }

    private async Task ChangeLanguage(string language)
    {
        if (_currentLanguage != language)
        {
            _currentLanguage = language;

            // Guardar preferencia de idioma
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "preferredLanguage", language);

            // Refrescar la página para aplicar el cambio de idioma
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
    }

    private string LocalizedText(string key)
    {
        try
        {
            // Usamos una versión sincrónica aquí para evitar problemas de JS durante el prerenderizado
            return LocalizationService.GetLocalizedTextAsync(key, _currentLanguage).Result;
        }
        catch
        {
            return key;
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (!_isDisposed)
        {
            if (_module is not null)
            {
                await _module.DisposeAsync();
            }

            _isDisposed = true;
        }
    }
}